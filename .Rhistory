aes(y=Estimateage,color=NULL, group=NULL, fill=age),size=7, color="gray"
) +
geom_errorbar(data=results_diff[outcome=="CRAE"&Pollutant=="NOx"],
aes(ymin=CIlowage, ymax=CIhighage, color=NULL, group=NULL),
size=2.5, width=w*1.5/4, color="gray"
)   +
guides(fill=guide_legend("", override.aes=list(shape=15, size = 3, fill="gray")))
dodge <- position_dodge(1/2)
w  <- 1/2 #width constant
labelsize <- 12
ggplot(data=results_diff[outcome=="CRVE"], aes(x=adjustment, y=Estimate, group=Pollutant, color=Pollutant)) +
scale_color_discrete(breaks=c("PM2.5", "NOx"),
labels=c(expression(PM[2.5]),
expression(NO[X]))
)+
geom_hline(yintercept=0, alpha=.7) +
geom_point(position=dodge, size=7) +
geom_errorbar(aes(ymin=CIlow, ymax=CIhigh), position=dodge,size=2.5, width=w*3/4) +
xlab("Adjustment") + ylab(expression(paste("change in CRVE (",mu,")"))) +
theme_bw(30) +
theme(legend.key.size=unit(.5, "inches"),
line=element_line(size=2),
panel.border=element_rect(size=2),
panel.grid=element_line(size=10),
axis.title.x=element_text(vjust=0),
axis.title.y=element_text(hjust=0),
legend.title=element_text(vjust=0)) +
geom_point(data=results_diff[outcome=="CRAE"&Pollutant=="PM2.5"],
aes(y=Estimateage,color=NULL, group=NULL, fill=age),size=7, color="gray"
) +
geom_errorbar(data=results_diff[outcome=="CRAE"&Pollutant=="NOx"],
aes(ymin=CIlowage, ymax=CIhighage, color=NULL, group=NULL),
size=2.5, width=w*1.5/4, color="gray"
)   +
guides(fill=guide_legend("", override.aes=list(shape=15, size = 3, fill="gray")))
results_diff
18.50*2
15.50+5.50
setwd("C:/Users/Micha/Dropbox/research/UKPLS package/sample/national PLSKrig model")  ############directory containing the scripts (this will be the NO2 sat folder that I gave you recently)
source('functions_readdata.r')
source('PLSK_source_UKvars.R')
DR0119 <- init.DR0119(dataloc="C:/Users/Michael/Dropbox/research/UKPLS package/sample/data/")          ############dataloc should be the parent directory containing the dr00119 folder
DR0119 <- init.DR0119(dataloc="C:/Users/Micha/Dropbox/research/UKPLS package/sample/data/")          ############dataloc should be the parent directory containing the dr00119 folder
##ie, my actual data is in H:\data\dr0119\dr0119_agency_covars.txt and dr0119_NO2_annual_avgs.txt
###init.DR0019 returns a function that reads in the data
###this seems complicated but it's more efficient when I'm reading in the same data several times (memoization)
source('runmodel_UKvars.R') ###this file contains the wrapper functions to actually run the model: runcv and runfull
require(deldir)         ##not sure if you need this package, I might have just used that for the satellite stuff
###establish data parameters
randomsample <- .3 #this is just for my data-read function. it can take a random subset of the dataset. NULL is the full dataset or a value between 0 and 1. .5 is a 50% sample
desc.vars <- c('county','state','state_plane', 'lambert_x','lambert_y')
LID_drop=c("318638" , "318637", "2287")  ###these locations have been problematic (ie, missing covariates) in the past
vardrop <- c("m_to_truck", "m_to_oil", "m_to_6oil", "m_to_main_cityhall", "m_to_local_cityhall", "satellite_NO2")
#remove these variables from the dataset if you have them. we don't model with them
#m_to_truck has had distance problems in some states, the oil and cityhall variables are not available everythwer, satellite_NO2 is the variable given to us by marshall et al
pollutant <- "NO2" #this is just an input to my dataread function
yearparam <- 2000:2001 #input to my dataread function
rawdata.l <- lapply(yearparam, DR0119, pollutant=pollutant, vardrop=vardrop, LID_drop=LID_drop,randomsample=NULL)  #read in the data using the data-read function DR0119
##the code for this function is in functions_readdata.r
#check for missing rows
stopifnot(!any(unlist(lapply(rawdata.l, apply,1,function(.x){any(is.na(.x))}))))
##identify location_id of missing rows (IF THERE ARE MISSINGS)
lapply(rawdata.l, function(.rawdata){
missingrow <- apply(.rawdata, 1, function(.x) any(is.na(.x)))
.rawdata$location_id[missingrow]
})
#you can specify manual cv groups with run.cv(..., manual.cv=<integer vector>)
###########Run CV models
#not run
if(FALSE){
###non-parallel version since you're just running one year:
NO2test.cv <- lapply(rawdata.l, function(.rawdata){
runcv(pls=2, rawdata=.rawdata, manual.cv=NULL, desc.vars=desc.vars, UK.varnames=NULL)
})
}
#######run full models
NO2test.full <- lapply(rawdata.l, function(.rawdata){
runfull(pls=2, rawdata=.rawdata, desc.vars=desc.vars, UK.varnames=NULL)
})
library(devtools)
?create
create("C:/Users/micha/Documents/git/regionalkrig")
setwd("C:/Users/micha/Documents/git/regionalkrig")
source('R/functions_readdata.r')
source('R/PLSK_source_UKvars.R')
ource('R/functions_readdata.r')
source('R/functions_readdata.r')
source('R/PLSK_source_UKvars.R')
load()
attach('regional_polygons.RData', pos=2)
attach('R/regional_polygons.RData', pos=2)
load_all()
library(roxygen2)
install.packages("roxygen2")
library(devtools)
library(data.table)
library(geoR)
library(maps)
library(mvtnorm)
library(pls)
library(SpatioTemporal)
library(corpcor)
library(data.table)
attach('R/regional_polygons.RData', pos=2)
assign('weco.polygon', weco.polygon, envir=.GlobalEnv)
assign('east.polygon', east.polygon, envir=.GlobalEnv)
load_all()
load_all()
DR0119 <- init.DR0119(dataloc="C:/Users/Micha/Dropbox/research/UKPLS package/sample/data/")          ############dataloc should be the parent directory containing the dr00119 folder
DR0119 <- init.DR0119(dataloc="data/")          ############dataloc should be the parent directory containing the dr00119 folder
DR0119 <- init.DR0119(dataloc="/data/")          ############dataloc should be the parent directory containing the dr00119 folder
init.DR0119
DR0119 <- init.DR0119(dataloc="./data/")
paste("/data", "dr0119/dr0119_PM25_annual_avgs.txt",sep='')
fread(	paste("/data", "dr0119/dr0119_PM25_annual_avgs.txt",sep=''))
fread(	paste("/data/", "dr0119/dr0119_PM25_annual_avgs.txt",sep=''))
paste("/data/", "dr0119/dr0119_PM25_annual_avgs.txt",sep='')
fread(	paste("data/", "dr0119/dr0119_PM25_annual_avgs.txt",sep=''))
paste("data/", "dr0119/dr0119_PM25_annual_avgs.txt",sep='')
getwd()
list.files()
fread("data/dr0119/dr0119_PM25_annual_avgs.txt")
fread(	paste("data/", "dr0119/dr0119_PM25_annual_avgs.txt",sep=''))
DR0119 <- init.DR0119(dataloc="data/")
rm(list=ls())
rm(list=ls())
#setwd("C:/Users/micha/Documents/git/regionalkrig")
#install.packages(c("SpatioTemporal","corpcor","data.table","geoR","maps","mvtnorm","pls","deldir","ggplot2","mapproj", "devtools","roxygen2"))
library(devtools)
library(data.table)
library(geoR)
library(maps)
library(mvtnorm)
library(pls)
library(SpatioTemporal)
library(corpcor)
library(data.table)
#
# regional definitions east.polygon and weco.polygon
attach('R/regional_polygons.RData', pos=2)
assign('weco.polygon', weco.polygon, envir=.GlobalEnv)
assign('east.polygon', east.polygon, envir=.GlobalEnv)
load_all()
DR0119 <- init.DR0119(dataloc="data/") #generate a function that reads in DR0119
randomsample <- .3 #this is just for my data-read function. it can take a random subset of the dataset. NULL is the full dataset or a value between 0 and 1. .5 is a 50% sample
desc.vars <- c('county','state','state_plane', 'lambert_x','lambert_y')
LID_drop=c("318638" , "318637", "2287")  ###these locations have been problematic (ie, missing covariates) in the past
vardrop <- c("m_to_truck", "m_to_oil", "m_to_6oil", "m_to_main_cityhall", "m_to_local_cityhall", "satellite_NO2")
#remove these variables from the dataset if you have them. we don't model with them
#m_to_truck has had distance problems in some states, the oil and cityhall variables are not available everythwer, satellite_NO2 is the variable given to us by marshall et al
pollutant <- "NO2" #this is just an input to my dataread function
yearparam <- 2000:2001 #input to my dataread function
rawdata.l <- lapply(yearparam, DR0119, pollutant=pollutant, vardrop=vardrop, LID_drop=LID_drop,randomsample=NULL)  #read in the data using the data-read function DR0119
DR0119 <- init.DR0119(dataloc="data/") #generate a function that reads in DR0119
library(data.table)
DR0119 <- init.DR0119(dataloc="data/") #generate a function that reads in DR0119
dataloc="data/"
stopifnot(substr(dataloc, nchar(dataloc), nchar(dataloc))=="/")
PM25 <- fread(	paste(dataloc, "dr0119/dr0119_PM25_annual_avgs.txt",sep=''))
NO2 <- fread(	paste(dataloc, "dr0119/dr0119_NO2_annual_avgs.txt",sep=''))
NO2[, native_id:=as.character(native_id)]
dr.m.cov <- fread(paste0(dataloc, "dr0119/dr0119_agency_covars.txt"))
dr.m.cov[, native_id:=as.character(native_id)]
dr.m.cov[, location_id:=NULL] #################################remove location id from dr.m.cov because it's in the obs file
#################################merge by native_id
setkey(dr.m.cov, native_id)
function(year, pollutant, randomsample=NULL, LID_drop=NULL,vardrop=NULL, varkeep=NULL, remove.collocated=TRUE){
stopifnot(sum(!is.null(vardrop), !is.null(varkeep)) <2)  #vardop and varkeep can't be used simultaneously
if(!is.null(randomsample)){
if(randomsample == 1){
stop("randomsample==1 is untested. To use all data, set randomsample=NULL")
}
}
stopifnot( pollutant %in% c("PM25","NO2"))
if(pollutant == "PM25") stop("covariate database missing improve monitors in this DR")
if(pollutant=="PM25"){
stopifnot( year %in% 1999:2012 )
dr.m.obs <- PM25
}
if(pollutant=="NO2"){
stopifnot( year %in% 1990:2012 )
dr.m.obs <- NO2
}
setkey(dr.m.obs,native_id)
pollutant_conc_name <- if( year %in% c(1992, 1996, 2000, 2004, 2008, 2012)){
paste("avg_", pollutant, "_366_",year,"0101",sep='')
}else{
paste("avg_", pollutant, "_365_", year, "0101", sep='')
}
###subset dr.m.obs to only native_id and year of interest
monitor <- dr.m.obs[,c("native_id",	"location_id", pollutant_conc_name),with=FALSE]
setnames(monitor, pollutant_conc_name,"pollutant_conc")
if(!is.null(varkeep)){
varkeep <- c(varkeep, "native_id", "latitude", "longitude", "lambert_x",
"lambert_y", "state_plane", "state", "county")
dr.m.cov <- dr.m.cov[, varkeep, with=FALSE]
}
out <- dr.m.cov[monitor]
textvars <- c("native_id","pollutant_conc","location_id",
"latitude","longitude",	"lambert_x", "lambert_y",
"state_plane", "state", "county")
setcolorder(out, c(textvars, setdiff(names(out), textvars)) )
setkey(out, latitude, longitude)
#cat("removing ", sum(is.na(out$pollutant_conc)), " rows corresponding to missing pollutants")
out <- out[!is.na(pollutant_conc),]
if(!is.null(LID_drop)){
out <- out[!location_id %in% LID_drop,]
}
#stopifnot(is.null(dim(duplicated(out))))
if(remove.collocated){
cat("removing ", sum(duplicated(out))," rows corresponding to duplicate locations")
out <- unique(out)
}
if(!is.null(randomsample)){
keepn <- round(nrow(out)*randomsample)
keep <- sample(1:nrow(out),keepn, repl=FALSE)
out <- out[keep,]
}
if(out[, sum(is.na(.SD)), .SDcols=setdiff(names(out), textvars)]){
missing_ids <- out[out[, apply(.SD,1, function(.v) any(is.na(.v))), .SDcols=setdiff(names(out), textvars)], location_id]
stop("missing geocovariates in LIDs: ", paste(missing_ids, collapse=" "))
}
out <- as.data.frame(out)
out <- out[,setdiff(names(out), vardrop)]
attr(out, "year") <- year
attr(out, "pollutant") <- pollutant
out
}
DR0119 <- init.DR0119(dataloc="data/") #generate a function that reads in DR0119
load_all()
DR0119 <- init.DR0119(dataloc="data/") #generate a function that reads in DR0119
rm(list=ls())
#setwd("C:/Users/micha/Documents/git/regionalkrig")
#install.packages(c("SpatioTemporal","corpcor","data.table","geoR","maps","mvtnorm","pls","deldir","ggplot2","mapproj", "devtools","roxygen2"))
library(devtools)
library(data.table)
library(geoR)
library(maps)
library(mvtnorm)
library(pls)
library(SpatioTemporal)
library(corpcor)
library(data.table)
#
# regional definitions east.polygon and weco.polygon
attach('R/regional_polygons.RData', pos=2)
assign('weco.polygon', weco.polygon, envir=.GlobalEnv)
assign('east.polygon', east.polygon, envir=.GlobalEnv)
load_all()
DR0119 <- init.DR0119(dataloc="data/") #generate a function that reads in DR0119
dataloc
dataloc="data/"
stopifnot(substr(dataloc, nchar(dataloc), nchar(dataloc))=="/")
PM25 <- fread(	paste(dataloc, "dr0119/dr0119_PM25_annual_avgs.txt",sep=''))
NO2 <- fread(	paste(dataloc, "dr0119/dr0119_NO2_annual_avgs.txt",sep=''))
NO2[, native_id:=as.character(native_id)]
load_all()
DR0119 <- init.DR0119(dataloc="data/") #generate a function that reads in DR0119
load_all()
DR0119 <- init.DR0119(dataloc="data/") #generate a function that reads in DR0119
DR0119 <- init.DR0119() #generate a function that reads in DR0119
load_all()
DR0119 <- init.DR0119() #generate a function that reads in DR0119
dataloc="data/"
stopifnot(substr(dataloc, nchar(dataloc), nchar(dataloc))=="/")
PM25 <- fread(	paste(dataloc, "dr0119/dr0119_PM25_annual_avgs.txt",sep=''))
NO2 <- fread(	paste(dataloc, "dr0119/dr0119_NO2_annual_avgs.txt",sep=''))
NO2
rm(list=ls())
#setwd("C:/Users/micha/Documents/git/regionalkrig")
#install.packages(c("SpatioTemporal","corpcor","data.table","geoR","maps","mvtnorm","pls","deldir","ggplot2","mapproj", "devtools","roxygen2"))
library(devtools)
library(data.table)
library(geoR)
library(maps)
library(mvtnorm)
library(pls)
library(SpatioTemporal)
library(corpcor)
library(data.table)
#
# regional definitions east.polygon and weco.polygon
attach('R/regional_polygons.RData', pos=2)
assign('weco.polygon', weco.polygon, envir=.GlobalEnv)
assign('east.polygon', east.polygon, envir=.GlobalEnv)
load_all()
DR0119 <- init.DR0119() #generate a function that reads in DR0119
NO2
load_all()
DR0119 <- init.DR0119() #generate a function that reads in DR0119
load_all()
DR0119 <- init.DR0119() #generate a function that reads in DR0119
ls()
class(NO2)
load_all()
DR0119 <- init.DR0119() #generate a function that reads in DR0119
ls()
class(NO2)
DR0119 <- init.DR0119() #generate a function that reads in DR0119
NO2
NO2
NO2[, native_id:=as.character(native_id)]
class(NO2)
NO2[, as.character(native_id)]
NO2[, native_id]
NO2[, "native_id"]
#setwd("C:/Users/micha/Documents/git/regionalkrig")
#install.packages(c("SpatioTemporal","corpcor","data.table","geoR","maps","mvtnorm","pls","deldir","ggplot2","mapproj", "devtools","roxygen2"))
library(devtools)
library(data.table)
library(geoR)
library(maps)
library(mvtnorm)
library(pls)
library(SpatioTemporal)
library(corpcor)
library(data.table)
#
# regional definitions east.polygon and weco.polygon
attach('R/regional_polygons.RData', pos=2)
assign('weco.polygon', weco.polygon, envir=.GlobalEnv)
assign('east.polygon', east.polygon, envir=.GlobalEnv)
load_all()
DR0119 <- init.DR0119() #generate a function that reads in DR0119
Q
init.DR0119 <- function(dataloc="data/"){
stopifnot(substr(dataloc, nchar(dataloc), nchar(dataloc))=="/")
PM25 <- fread(	paste(dataloc, "dr0119/dr0119_PM25_annual_avgs.txt",sep=''))
NO2 <- fread(	paste(dataloc, "dr0119/dr0119_NO2_annual_avgs.txt",sep=''))
browser()
NO2[, native_id:=as.character(native_id)]
dr.m.cov <- fread(paste0(dataloc, "dr0119/dr0119_agency_covars.txt"))
dr.m.cov[, native_id:=as.character(native_id)]
dr.m.cov[, location_id:=NULL] #################################remove location id from dr.m.cov because it's in the obs file
#################################merge by native_id
setkey(dr.m.cov, native_id)
function(year, pollutant, randomsample=NULL, LID_drop=NULL,vardrop=NULL, varkeep=NULL, remove.collocated=TRUE){
stopifnot(sum(!is.null(vardrop), !is.null(varkeep)) <2)  #vardop and varkeep can't be used simultaneously
if(!is.null(randomsample)){
if(randomsample == 1){
stop("randomsample==1 is untested. To use all data, set randomsample=NULL")
}
}
stopifnot( pollutant %in% c("PM25","NO2"))
if(pollutant == "PM25") stop("covariate database missing improve monitors in this DR")
if(pollutant=="PM25"){
stopifnot( year %in% 1999:2012 )
dr.m.obs <- PM25
}
if(pollutant=="NO2"){
stopifnot( year %in% 1990:2012 )
dr.m.obs <- NO2
}
setkey(dr.m.obs,native_id)
pollutant_conc_name <- if( year %in% c(1992, 1996, 2000, 2004, 2008, 2012)){
paste("avg_", pollutant, "_366_",year,"0101",sep='')
}else{
paste("avg_", pollutant, "_365_", year, "0101", sep='')
}
###subset dr.m.obs to only native_id and year of interest
monitor <- dr.m.obs[,c("native_id",	"location_id", pollutant_conc_name),with=FALSE]
setnames(monitor, pollutant_conc_name,"pollutant_conc")
if(!is.null(varkeep)){
varkeep <- c(varkeep, "native_id", "latitude", "longitude", "lambert_x",
"lambert_y", "state_plane", "state", "county")
dr.m.cov <- dr.m.cov[, varkeep, with=FALSE]
}
out <- dr.m.cov[monitor]
textvars <- c("native_id","pollutant_conc","location_id",
"latitude","longitude",	"lambert_x", "lambert_y",
"state_plane", "state", "county")
setcolorder(out, c(textvars, setdiff(names(out), textvars)) )
setkey(out, latitude, longitude)
#cat("removing ", sum(is.na(out$pollutant_conc)), " rows corresponding to missing pollutants")
out <- out[!is.na(pollutant_conc),]
if(!is.null(LID_drop)){
out <- out[!location_id %in% LID_drop,]
}
#stopifnot(is.null(dim(duplicated(out))))
if(remove.collocated){
cat("removing ", sum(duplicated(out))," rows corresponding to duplicate locations")
out <- unique(out)
}
if(!is.null(randomsample)){
keepn <- round(nrow(out)*randomsample)
keep <- sample(1:nrow(out),keepn, repl=FALSE)
out <- out[keep,]
}
if(out[, sum(is.na(.SD)), .SDcols=setdiff(names(out), textvars)]){
missing_ids <- out[out[, apply(.SD,1, function(.v) any(is.na(.v))), .SDcols=setdiff(names(out), textvars)], location_id]
stop("missing geocovariates in LIDs: ", paste(missing_ids, collapse=" "))
}
out <- as.data.frame(out)
out <- out[,setdiff(names(out), vardrop)]
attr(out, "year") <- year
attr(out, "pollutant") <- pollutant
out
}
}
DR0119 <- init.DR0119() #generate a function that reads in DR0119
q
load_all()
DR0119 <- init.DR0119() #generate a function that reads in DR0119
load_all()
DR0119
rm(list=ls())
attach('R/regional_polygons.RData', pos=2)
assign('weco.polygon', weco.polygon, envir=.GlobalEnv)
assign('east.polygon', east.polygon, envir=.GlobalEnv)
load_all()
library(devtools)
library(devtools)
load_all()
# regional definitions east.polygon and weco.polygon
install.packages("data.table")
library(devtools)
load_all()
DR0119 <- init.DR0119() #generate a function that reads in DR0119
library(devtools)
load_all()
# regional definitions east.polygon and weco.polygon
attach('R/regional_polygons.RData', pos=2)
assign('weco.polygon', weco.polygon, envir=.GlobalEnv)
assign('east.polygon', east.polygon, envir=.GlobalEnv)
DR0119 <- init.DR0119() #generate a function that reads in DR0119
data.table::fread
DR0119 <- init.DR0119() #generate a function that reads in DR0119
load_all()
DR0119 <- init.DR0119() #generate a function that reads in DR0119
load_all()
DR0119 <- init.DR0119() #generate a function that reads in DR0119
load_all()
DR0119 <- init.DR0119() #generate a function that reads in DR0119
load_all()
DR0119 <- init.DR0119() #generate a function that reads in DR0119
load_all()
load_all()
DR0119 <- init.DR0119() #generate a function that reads in DR0119
randomsample <- .3 #this is just for my data-read function. it can take a random subset of the dataset. NULL is the full dataset or a value between 0 and 1. .5 is a 50% sample
desc.vars <- c('county','state','state_plane', 'lambert_x','lambert_y')
LID_drop=c("318638" , "318637", "2287")  ###these locations have been problematic (ie, missing covariates) in the past
vardrop <- c("m_to_truck", "m_to_oil", "m_to_6oil", "m_to_main_cityhall", "m_to_local_cityhall", "satellite_NO2")
pollutant <- "NO2" #this is just an input to my dataread function
yearparam <- 2000:2001 #input to my dataread function
rawdata.l <- lapply(yearparam, DR0119, pollutant=pollutant, vardrop=vardrop, LID_drop=LID_drop,randomsample=NULL)  #read in the data using the data-read function DR0119
stopifnot(!any(unlist(lapply(rawdata.l, apply,1,function(.x){any(is.na(.x))}))))
lapply(rawdata.l, function(.rawdata){
missingrow <- apply(.rawdata, 1, function(.x) any(is.na(.x)))
.rawdata$location_id[missingrow]
})
NO2test.cv <- lapply(rawdata.l, function(.rawdata){
runcv(pls=2, rawdata=.rawdata, manual.cv=NULL, desc.vars=desc.vars, UK.varnames=NULL)
})
setwd("C:/Users/micha/Documents/git/regionalkrig")
# regional definitions east.polygon and weco.polygon
attach('R/regional_polygons.RData', pos=2)
assign('weco.polygon', weco.polygon, envir=.GlobalEnv)
assign('east.polygon', east.polygon, envir=.GlobalEnv)
library(devtools)
load_all()
DR0119 <- init.DR0119() #generate a function that reads in DR0119
#note that r/runmodel_UKvars.R  contains the wrapper functions to actually run the model: runcv and runfull
###establish data parameters
randomsample <- .3 #this is just for my data-read function. it can take a random subset of the dataset. NULL is the full dataset or a value between 0 and 1. .5 is a 50% sample
desc.vars <- c('county','state','state_plane', 'lambert_x','lambert_y')
LID_drop=c("318638" , "318637", "2287")  ###these locations have been problematic (ie, missing covariates) in the past
vardrop <- c("m_to_truck", "m_to_oil", "m_to_6oil", "m_to_main_cityhall", "m_to_local_cityhall", "satellite_NO2")
#remove these variables from the dataset if you have them. we don't model with them
#m_to_truck has had distance problems in some states, the oil and cityhall variables are not available everythwer, satellite_NO2 is the variable given to us by marshall et al
pollutant <- "NO2" #this is just an input to my dataread function
yearparam <- 2000:2001 #input to my dataread function
rawdata.l <- lapply(yearparam, DR0119, pollutant=pollutant, vardrop=vardrop, LID_drop=LID_drop,randomsample=NULL)  #read in the data using the data-read function DR0119
##the code for this function is in functions_readdata.r
#check for missing rows
stopifnot(!any(unlist(lapply(rawdata.l, apply,1,function(.x){any(is.na(.x))}))))
##identify location_id of missing rows (IF THERE ARE MISSINGS)
lapply(rawdata.l, function(.rawdata){
missingrow <- apply(.rawdata, 1, function(.x) any(is.na(.x)))
.rawdata$location_id[missingrow]
})
NO2test.cv <- lapply(rawdata.l, function(.rawdata){
runcv(pls=2, rawdata=.rawdata, manual.cv=NULL, desc.vars=desc.vars, UK.varnames=NULL)
})
load_all()
NO2test.cv <- lapply(rawdata.l, function(.rawdata){
runcv(pls=2, rawdata=.rawdata, manual.cv=NULL, desc.vars=desc.vars, UK.varnames=NULL)
})
load_all()
NO2test.cv <- lapply(rawdata.l, function(.rawdata){
runcv(pls=2, rawdata=.rawdata, manual.cv=NULL, desc.vars=desc.vars, UK.varnames=NULL)
})
load_all()
NO2test.cv <- lapply(rawdata.l, function(.rawdata){
runcv(pls=2, rawdata=.rawdata, manual.cv=NULL, desc.vars=desc.vars, UK.varnames=NULL)
})
load_all()
DR0119 <- init.DR0119() #generate a function that reads in DR0119
NO2test.cv <- lapply(rawdata.l, function(.rawdata){
runcv(pls=2, rawdata=.rawdata, manual.cv=NULL, desc.vars=desc.vars, UK.varnames=NULL)
})
load_all()
NO2test.cv <- lapply(rawdata.l, function(.rawdata){
runcv(pls=2, rawdata=.rawdata, manual.cv=NULL, desc.vars=desc.vars, UK.varnames=NULL)
})
load_all()
NO2test.cv <- lapply(rawdata.l, function(.rawdata){
runcv(pls=2, rawdata=.rawdata, manual.cv=NULL, desc.vars=desc.vars, UK.varnames=NULL)
})
library(corpcor)
corpcor::is.positive.definite
library(SpatioTemporal)
SpatioTemporal::is.positive.definite
